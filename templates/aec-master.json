{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Acqueon Engagement Cloud (Master Template) for Amazon Connect (qs-)",
	"Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Amazon VPC Configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
						"VPCCIDR",
                        "PublicSubnet1CIDR",
                        "PublicSubnet2CIDR",
                        "PrivateSubnet1CIDR",
                        "PrivateSubnet2CIDR",
                        "KeyPairName"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "EC2InstanceType",
						"RDPFrom"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon RDS Configuration"
                    },
                    "Parameters": [
                        "RDSDBInstanceName",
                        "DBMasterUser",
                        "DBMasterPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon Route53 Configuration"
                    },
                    "Parameters": [
                        "DomainHostedZone",
                        "CFDomainName",
                        "CFCertificate",
                        "ELBCertificate"
                    ]
                }
            ],
            "ParameterLabels": {
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "PublicSubnet1CIDR": {
                    "default": "Public Subnet 1 CIDR"
                },
                "PublicSubnet2CIDR": {
                    "default": "Public Subnet 2 CIDR"
                },
                "PrivateSubnet1CIDR": {
                    "default": "Private Subnet 1 CIDR"
                },
                "PrivateSubnet2CIDR": {
                    "default": "Private Subnet 2 CIDR"
                },
                "RDPFrom": {
                    "default": "RDP From"
                },
                "RDSDBInstanceName": {
                    "default": "Instance Name"
                },
                "DBMasterUser": {
                    "default": "DB Master User"
                },
                "DBMasterPassword": {
                    "default": "DB Master Password"
                },
                "EC2InstanceType": {
                    "default": "Instance Type"
                },
                "KeyPairName": {
                    "default": "Key Name"
                },
                "DomainHostedZone": {
                    "default": "Hosted Zone"
                },
                "CFDomainName": {
                    "default": "CF DomainName"
                },
                "CFCertificate": {
                    "default": "CF Certificate ARN"
                },
                "ELBCertificate": {
                    "default": "ELB Certificate ARN"
                }
            }
        }
    },
    "Parameters": {
        "VPCCIDR": {
            "Description": "The IP address range for VPC",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.100.0.0/16",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "AvailabilityZones": {
            "Description": "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved and only 2 AZs are used for this deployment.",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>"
        },
        "PublicSubnet1CIDR": {
            "Description": "The IP address range for Public Subnet 1",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.100.1.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "PublicSubnet2CIDR": {
            "Description": "The IP address range for Public Subnet 2",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.100.2.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "PrivateSubnet1CIDR": {
            "Description": "The IP address range for Private Subnet 1",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.100.3.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "PrivateSubnet2CIDR": {
            "Description": "The IP address range for Private Subnet 2",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.100.4.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "RDPFrom": {
            "Description": "The IP address range with access to BastionHost",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "RDSDBInstanceName": {
            "Description": "RDS DB Instance Name",
            "Type": "String",
            "MinLength": "2",
            "MaxLength": "25",
            "Default": "AEC-dbinstance1"
        },
        "DBMasterUser": {
            "Description": "RDS Master UserName",
            "Type": "String",
            "MinLength": "2",
            "MaxLength": "25",
            "Default": "sa"
        },
        "DBMasterPassword": {
            "Description": "RDS Master Password",
            "Type": "String",
            "MinLength": "3",
            "MaxLength": "25",
            "Default": "acqueonpwd",
            "NoEcho": true
        },
        "EC2InstanceType": {
            "Type": "String",
            "Default": "Option-1a",
            "AllowedValues": [
                "Option-1a",
                "Option-1b",
                "Option-2a",
                "Option-2b",
                "Option-3"
            ],
            "Description": "Refer 'AEC Capacity and Sizing section' of 'AEC Installation Guide' to select appropriate EC2 InstanceType"
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "CFDomainName": {
            "Description": "Alternate domain name for CloudFront",
            "Type": "String"
        },
        "CFCertificate": {
            "Description": "Certificate ARN for CloudFront. (Need to be created/imported in us-east-1 region)",
            "Type": "String"
        },
        "ELBCertificate": {
            "Description": "Certificate ARN for ELB. (Need to be created/imported in stack region )",
            "Type": "String"
        },
        "DomainHostedZone": {
            "Description": "Hosted Zone of the Domain (Required)",
            "Type": "AWS::Route53::HostedZone::Id"
        }
    },
    "Conditions": {
        "HasHttps": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                "",
                                {
                                    "Ref": "CFDomainName"
                                }
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                "",
                                {
                                    "Ref": "CFCertificate"
                                }
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                "",
                                {
                                    "Ref": "ELBCertificate"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "West3Region": {
            "Fn::Equals": [
                "eu-west-3",
                {
                    "Ref": "AWS::Region"
                }
            ]
        }
    },
    "Resources": {
        "VPCStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://s3.amazonaws.com/connect-b561029704a4/aecmodule/aec-vpc.template"
                },
                "Parameters": {
                    "VPCCIDR": {
                        "Ref": "VPCCIDR"
                    },
                    "AvailabilityZones": {
                        "Fn::Join": [
                            ",",
                            {
                                "Ref": "AvailabilityZones"
                            }
                        ]
                    },
                    "PublicSubnet1CIDR": {
                        "Ref": "PublicSubnet1CIDR"
                    },
                    "PublicSubnet2CIDR": {
                        "Ref": "PublicSubnet2CIDR"
                    },
                    "PrivateSubnet1CIDR": {
                        "Ref": "PrivateSubnet1CIDR"
                    },
                    "PrivateSubnet2CIDR": {
                        "Ref": "PrivateSubnet2CIDR"
                    },
                    "RDPFrom": {
                        "Ref": "RDPFrom"
                    }
                }
            }
        },
        "RDSStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://s3.amazonaws.com/connect-b561029704a4/aecmodule/aec-rds.template"
                },
                "Parameters": {
                    "AECSubnetPrivate1": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECSubnetPrivate1"
                        ]
                    },
                    "AECSubnetPrivate2": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECSubnetPrivate2"
                        ]
                    },
                    "AECPrivateGroup": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECPrivateGroup"
                        ]
                    },
                    "RDSDBInstanceName": {
                        "Ref": "RDSDBInstanceName"
                    },
                    "DBMasterUser": {
                        "Ref": "DBMasterUser"
                    },
                    "DBMasterPassword": {
                        "Ref": "DBMasterPassword"
                    },
                    "EC2InstanceType": {
                        "Ref": "EC2InstanceType"
                    }
                }
            }
        },
        "AMIStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": {
                    "Fn::Sub": "https://s3.amazonaws.com/connect-b561029704a4/aecmodule/aec-ami.template"
                },
                "Parameters": {
                    "EC2InstanceType": {
                        "Ref": "EC2InstanceType"
                    },
                    "KeyPairName": {
                        "Ref": "KeyPairName"
                    },
                    "CFDomainName": {
                        "Ref": "CFDomainName"
                    },
                    "CFCertificate": {
                        "Ref": "CFCertificate"
                    },
                    "ELBCertificate": {
                        "Ref": "ELBCertificate"
                    },
                    "DomainHostedZone": {
                        "Ref": "DomainHostedZone"
                    },
                    "AECSubnetPublic1": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECSubnetPublic1"
                        ]
                    },
                    "AECSubnetPublic2": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECSubnetPublic2"
                        ]
                    },
                    "AECWeb": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECWeb"
                        ]
                    },
                    "AECSubnetPrivate1": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECSubnetPrivate1"
                        ]
                    },
                    "AECSubnetPrivate2": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECSubnetPrivate2"
                        ]
                    },
                    "AECPrivateGroup": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECPrivateGroup"
                        ]
                    },
                    "AECVPC": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECVPC"
                        ]
                    },
                    "DBMasterUser": {
                        "Ref": "DBMasterUser"
                    },
                    "DBMasterPassword": {
                        "Ref": "DBMasterPassword"
                    },
                    "AECRDP": {
                        "Fn::GetAtt": [
                            "VPCStack",
                            "Outputs.AECRDP"
                        ]
                    },
                    "RDSDB": {
                        "Fn::GetAtt": [
                            "RDSStack",
                            "Outputs.RDSDB"
                        ]
                    }
                }
            }
        }
    },
    "Outputs": {
        "AECRDSEndpoint": {
            "Value": {
                "Fn::GetAtt": [
                    "RDSStack",
                    "Outputs.RDSDB"
                ]
            },
            "Description": "AEC RDS Database Endpoint Address"
        },
        "AECHostURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Fn::If": [
                                "HasHttps",
                                "https://",
                                "http://"
                            ]
                        },
                        {
                            "Fn::If": [
                                "HasHttps",
                                {
                                    "Ref": "CFDomainName"
                                },
                                {
                                    "Fn::GetAtt": [
                                        "AMIStack",
                                        "Outputs.cfdistributionDomainName"
                                    ]
                                }
                            ]
                        },
                        "/LCMConsole"
                    ]
                ]
            },
            "Description": "AEC Console Host URL"
        },
        "AECTenantURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Fn::If": [
                                "HasHttps",
                                "https://",
                                "http://"
                            ]
                        },
                        {
                            "Fn::If": [
                                "HasHttps",
                                {
                                    "Ref": "CFDomainName"
                                },
                                {
                                    "Fn::GetAtt": [
                                        "AMIStack",
                                        "Outputs.cfdistributionDomainName"
                                    ]
                                }
                            ]
                        },
                        "/instance1LCMConsole"
                    ]
                ]
            },
            "Description": "AEC Console Tenant URL"
        },
        "AECAgentClientURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Fn::If": [
                                "HasHttps",
                                "https://",
                                "http://"
                            ]
                        },
                        {
                            "Fn::If": [
                                "HasHttps",
                                {
                                    "Ref": "CFDomainName"
                                },
                                {
                                    "Fn::GetAtt": [
                                        "AMIStack",
                                        "Outputs.cfdistributionDomainName"
                                    ]
                                }
                            ]
                        },
                        "/instance1LCMAgentClient/CCAD.htm"
                    ]
                ]
            },
            "Description": "AEC Agent Client URL"
        },
        "AECUserRegConsole": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Fn::If": [
                                "HasHttps",
                                "https://",
                                "http://"
                            ]
                        },
                        {
                            "Fn::If": [
                                "HasHttps",
                                {
                                    "Ref": "CFDomainName"
                                },
                                {
                                    "Fn::GetAtt": [
                                        "AMIStack",
                                        "Outputs.cfdistributionDomainName"
                                    ]
                                }
                            ]
                        },
                        "/AECInstanceConsole"
                    ]
                ]
            },
            "Description": "AEC User Registration Console URL"
        },
        "AECBastionIp": {
            "Value": {
                "Fn::GetAtt": [
                    "AMIStack",
                    "Outputs.BastionEC2InstancePublicIp"
                ]
            },
            "Description": "AEC Bastion Host Public IP"
        }
    }
}
